name: CountOnMeServer

on:
  push:
    branches:
      - main
      - janice

env:
  AWS_REGION: ap-southeast-1
  ECS_CLUSTER: CountOnMe
  ECR_REGISTRY_URL: 730335643718.dkr.ecr.ap-southeast-1.amazonaws.com
  ECR_TRANSACTIONS_REPOSITORY: count-on-me/transactions
  ECS_TRANSACTIONS_SERVICE: CountOnMe-Server-service-2y7187a8
  ECS_TRANSACTIONS_TASK_DEFINITION: TransactionService/aws/taskDefinition.json
  TRANSACTIONS_CONTAINER_NAME: CountOnMe-Server-Transactions
  ECR_USERS_REPOSITORY: count-on-me/users
  ECS_USERS_SERVICE: CountOnMe-Server-service-2y7187a8
  ECS_USERS_TASK_DEFINITION: UserService/aws/taskDefinition.json
  USERS_CONTAINER_NAME: CountOnMe-Server-Users

jobs:
  build-transactions:
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.build-image.outputs.image }}

    steps:
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v3
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2 
  
    - name: Checkout code
      uses: actions/checkout@v4
          
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      id: build-image
      env:
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker buildx build -f ../TransactionService/Dockerfile --platform linux/amd64,linux/arm64 -t $ECR_REGISTRY_URL/$ECR_TRANSACTIONS_REPOSITORY:$IMAGE_TAG --push .
        echo "image=$ECR_REGISTRY_URL/$ECR_TRANSACTIONS_REPOSITORY:$IMAGE_TAG"
        echo "image=$ECR_REGISTRY_URL/$ECR_TRANSACTIONS_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
  
  deploy-transactions:
    runs-on: ubuntu-latest
    needs: build-transactions
    steps:

    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v3
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2 

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TRANSACTIONS_TASK_DEFINITION }}
        container-name: ${{ env.TRANSACTIONS_CONTAINER_NAME }}
        image: ${{ needs.build-transactions.outputs.image }}
        
    - name: Update ECS Service
      uses: aws-actions/amazon-ecs-deploy-task-definition@v2
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_TRANSACTIONS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true


  build-users:
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.build-image.outputs.image }}

    steps:
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v3
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2 
  
    - name: Checkout code
      uses: actions/checkout@v4
          
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      id: build-image
      env:
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker buildx build -f ../UserService/Dockerfile --platform linux/amd64,linux/arm64 -t $ECR_REGISTRY_URL/$ECR_USERS_REPOSITORY:$IMAGE_TAG --push .
        echo "image=$ECR_REGISTRY_URL/$ECR_USERS_REPOSITORY:$IMAGE_TAG"
        echo "image=$ECR_REGISTRY_URL/$ECR_USERS_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
  
  deploy-users:
    runs-on: ubuntu-latest
    needs: build-users
    steps:

    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v3
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2 

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_USERS_TASK_DEFINITION }}
        container-name: ${{ env.USERS_CONTAINER_NAME }}
        image: ${{ needs.build-users.outputs.image }}
        
    - name: Update ECS Service
      uses: aws-actions/amazon-ecs-deploy-task-definition@v2
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_USERS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
