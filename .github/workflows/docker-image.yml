name: CountOnMeServer

on:
  push:
    branches:
      - main
      - janice

env:
  AWS_REGION: ap-southeast-1
  ECR_REGISTRY_URL: 730335643718.dkr.ecr.ap-southeast-1.amazonaws.com
  ECR_REPOSITORY: countonme-server
  ECS_SERVICE: CountOnMe-Server-service-2y7187a8
  ECS_CLUSTER: CountOnMe
  ECS_TASK_DEFINITION: aws/taskDefinition.json
  CONTAINER_NAME: docker

jobs:
  configure:
    runs-on: ubuntu-latest
    steps:
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v3
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2 
      
  build:
    runs-on: ubuntu-latest
    needs: configure
    steps:
  
    - name: Checkout code
      uses: actions/checkout@v4
      with:
          repository: misterkillerman/CountOnMeServer
          
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      id: build-image
      run: |
        docker buildx build --platform linux/amd64,linux/arm64 -t countonme-react .
        docker tag $ECR_REPOSITORY:latest $ECR_REGISTRY_URL/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY_URL/$ECR_REPOSITORY:latest
        echo "image=$ECR_REGISTRY_URL/$ECR_REPOSITORY:latest" >> $GITHUB_OUTPUT

  deploy:
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ env.IMAGE_URL }}
        
    - name: Update ECS Service
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
